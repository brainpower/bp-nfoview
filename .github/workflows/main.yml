name: CI

on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
    tags: [ "*" ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler:
          - name: gcc
            cc: gcc
            cxx: g++
          - name: clang
            cc: clang
            cxx: clang++
        qt_version:
          - name: Qt5
            major: 5
            packages: "qtbase5-dev qtbase5-dev-tools qt5-qmake"
          - name: Qt6
            major: 6
            packages: "qt6-base-dev qt6-base-dev-tools libqt6svg6-dev libqt6core5compat6-dev qmake6"

    name: "Build and test using ${{ matrix.compiler.name }} - Qt${{ matrix.qt_version.major }}"
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
      QT_MAJOR_VERSION: ${{ matrix.qt_version.major }}
      QT_SELECT: qt${{ matrix.qt_version.major }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: System Information
        run: cat /etc/os-release
      - name: apt update
        run: sudo apt-get update
      - name: apt upgrade
        run: sudo apt-get remove firefox && sudo apt-get dist-upgrade
      - name: Install Qt
        run: |
          sudo apt-get install \
            build-essential \
            ${{ matrix.qt_version.packages }} \
            cmake \
            ninja-build \
            clang \
            desktop-file-utils \
            libgl1-mesa-dev libegl1-mesa-dev
      - name: QMake Info
        run: /usr/lib/qt${{ matrix.qt_version.major }}/bin/qmake -query || true
      - name: Configure build
        run: |
          cmake \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Debug \
            -D QT_MAJOR_VERSION=${{ matrix.qt_version.major }} \
            -D BUILD_TESTING=ON \
            -B builddir \
            .
      - name: Compile
        run: ninja -C builddir
      - name: Run Tests
        run: ninja -C builddir test


  build_appimage:
    if: startsWith( github.ref, 'refs/tags/' )
    needs:
      - build # only try this if basic build succeeds
    # use the oldest supported to create the appimage, to make sure it runs almost everywhere
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Check for system updates
        run: |
          sudo apt-get update
          sudo apt-get dist-upgrade
      - name: Install Qt5 and build essentials
        run: |
          sudo apt-get install build-essential qt5-default wget cmake ninja-build libgl1-mesa-dev libegl1-mesa-dev
      - name: Download linuxdeploy
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
          chmod +x *.AppImage

      - name: Configure build
        run: |
          cmake \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_INSTALL_PREFIX=/usr \
            -D QT_MAJOR_VERSION=5 \
            -B builddir \
            .

      - name: Compile
        run: ninja -C builddir

      - name: Install into AppDir
        run: DESTDIR="$PWD/AppDir" ninja -C builddir install

      - name: Create AppImage
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -r 's@.*/([^/]+)$@\1@')
          export VERSION
          ./linuxdeploy-x86_64.AppImage --appdir AppDir/ --plugin qt --output appimage

      - name: Upload AppImage artifacts
        uses: actions/upload-artifact@main
        with:
          name: appimages
          path: bp-nfoview-*.AppImage


  build_windows_exe:
    if: startsWith( github.ref, 'refs/tags/' )
    needs:
      - build
    runs-on: ubuntu-latest
    container:
      image: archlinux
    steps:
      - uses: actions/checkout@v3

      - name: Prepare Cross Complie environment
        run: ./.github/workflows/scripts/prepare-cross-env.sh

      - name: Configure build
        run: |
          x86_64-w64-mingw32-cmake \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D BUILD_STATIC=ON \
            -D QT_MAJOR_VERSION=6 \
            -B builddir \
            -S .
      - name: Compile
        run: ninja -C builddir

      - name: Add version and architecture to filename
        run: |
          version=$(echo "${{ github.ref }}" | sed -r 's@.*/([^/]+)$@\1@')
          mv -v builddir/bp-nfoview.exe "bp-nfoview-${version}-x86_64.exe"

      - name: Upload Windows Executable artifacts
        uses: actions/upload-artifact@main
        with:
          name: windows-static
          path: bp-nfoview-*.exe


  create_release:
    if: startsWith(github.ref, 'refs/tags/v') # only release tags starting with v
    needs:
      - build_appimage
      - build_windows_exe
    runs-on: ubuntu-latest

    steps:
      - name: Download AppImage artifact
        uses: actions/download-artifact@v3
        with:
          name: appimages
      - name: Download AppImage artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-static

      - name: Create release draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${{ github.ref }}"
          # Cut off the "refs/tags" prefix.
          tag="${tag#"refs/tags/"}"
          version="${tag#refs/tags/v}"
          hub release create \
            --draft \
            --attach "bp-nfoview-${version}-x86_64.AppImage" \
            --attach "bp-nfoview-${version}-x86_64.exe" \
            "${tag}"
